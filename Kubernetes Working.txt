#Kuberntes all things

##################################################################################################################################################################################################################
# Deploy Kubernetes Dashboard

https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md

1] Command :-  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

2] create file dashboard-user.yaml

#####################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
#######################################

3] Create a service Account

Command :- kubectl create serviceaccount admin-user -n kubernetes-dashboard

4] Bind Role to account

Command :- kubectl create clusterrolebinding kubernetes-dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:admin-user

5] Get Access Token

Command :- kubectl -n kubernetes-dashboard create token admin-user

copy that token

6] Start DashBoard


Command :- kubectl proxy

7] Access The dashboard using below url with token that you have coiped
DashBoard :- http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/deployment/default/frontend?namespace=default

##################################################################################################################################################################################################################

# Way of deploying the App

## If you are deploying locally (not using Docker Hub), push to a local registry instead of Docker Hub.

1] Downloading local-registry image
Command :- docker run -d -p 5000:5000 --restart=always --name local-registry registry:2

2]Tag Your Images for the Local Registry
Command :- docker tag self-backend localhost:5000/self-backend
Command :- docker tag self-frontend localhost:5000/self-frontend

3] Push the Images to Local Registry
Command :- docker push localhost:5000/self-backend
Command :- docker push localhost:5000/self-frontend

4]Create a deployment files


################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: localhost:5000/self-backend  
          ports:
            - containerPort: 8080
          env:
            - name: NODE_ENV
              value: "production"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  type: NodePort
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8080         # Cluster-internal port
      targetPort: 8080   # Container port
      nodePort: 8080     # This exposes the backend on localhost:8080

################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: localhost:5000/self-frontend  # Change to your actual image name
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000        # Cluster-internal port
      targetPort: 3000  # Container port
      nodePort: 3000    # This exposes the frontend on localhost:3000
	  
######################################################################################


5] Apply the file
Command => -kubectl apply -f backend-deployment.yaml
Command => -kubectl apply -f frontend-deployment.yaml



6] Port Forwarding {Need To know use of this , but it helping for the backend working}

Command :- kubectl port-forward service/backend-service 8080:8080
Command :- kubectl port-forward service/frontend-service 3000:3000